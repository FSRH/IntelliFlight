#include <libopencm3/cm3/nvic.h>
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include <libopencm3/stm32/timer.h>

#ifndef ARRAY_LEN
#define ARRAY_LEN(array) (sizeof((array))/sizeof((array)[0]))
#endif

#define LED1_PORT GPIOE
#define LED1_PIN GPIO13
#define LED1_RCC RCC_GPIOE

/* Morse standard timings */
#define ELEMENT_TIME 500
#define DIT (1*ELEMENT_TIME)
#define DAH (3*ELEMENT_TIME)
#define INTRA (1*ELEMENT_TIME)
#define INTER (3*ELEMENT_TIME)
#define WORD (7*ELEMENT_TIME)

uint16_t frequency_sequence[] = {
    DIT,
    INTRA,
    DIT,
    INTRA,
    DIT,
    INTER,
    DAH,
    INTRA,
    DAH,
    INTRA,
    DAH,
    INTER,
    DIT,
    INTRA,
    DIT,
    INTRA,
    DIT,
    WORD,
};

int frequency_sel = 0;

static void clock_setup(void) {
  rcc_clock_setup_hsi(&rcc_3v3[RCC_CLOCK_3V3_72MHZ]);
}

static void gpio_setup(void) {
  /* Enable GPIO clock for leds. */
  rcc_periph_clock_enable(LED1_RCC);

  /* Enable led as output */

  gpio_mode_setup(LED1_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, LED1_PIN);
  gpio_set(LED1_PORT, LED1_PIN);
}

static void tim_setup(void) {
  /* Enable TIM2 clock. */
  rcc_periph_clock_enable(RCC_TIM2);

  /* Enable TIM2 interrupt. */
  nvic_enable_irq(NVIC_TIM2_IRQ);

  /* Reset TIM2 peripheral to defaults. */
  rcc_periph_reset_pulse(RST_TIM2);

  /* Timer global mode:
   * - No divider
   * - Alignment edge
   * - Direction up
   * (These are actually default values after reset above, so this call
   * is strictly unnecessary, but demos the api for alternative settings)
   */
  timer_set_mode(TIM2, TIM_CR1_CKD_CK_INT,
                 TIM_CR1_CMS_EDGE, TIM_CR1_DIR_UP);

  /*
   * Please take note that the clock source for STM32 timers
   * might not be the raw APB1/APB2 clocks.  In various conditions they
   * are doubled.  See the Reference Manual for full details!
   * In our case, TIM2 on APB1 is running at double frequency, so this
   * sets the prescaler to have the timer run at 5kHz
   */
  timer_set_prescaler(TIM2, ((rcc_apb1_frequency * 2) / 5000));

  /* Disable preload. */
  timer_disable_preload(TIM2);
  timer_continuous_mode(TIM2);

  /* count full range, as we'll update compare value continuously */
  timer_set_period(TIM2, 65535);

  /* Set the initual output compare value for OC1. */
  timer_set_oc_value(TIM2, TIM_OC1, frequency_sequence[frequency_sel++]);

  /* Counter enable. */
  timer_enable_counter(TIM2);

  /* Enable Channel 1 compare interrupt to recalculate compare values */
  timer_enable_irq(TIM2, TIM_DIER_CC1IE);
}

void tim2_isr(void) {
  if (timer_get_flag(TIM2, TIM_SR_CC1IF)) {

    /* Clear compare interrupt flag. */
    timer_clear_flag(TIM2, TIM_SR_CC1IF);

    /*
     * Get current timer value to calculate next
     * compare register value.
     */
    uint32_t compare_time = timer_get_counter(TIM2);

    /* Calculate and set the next compare value. */
    uint32_t frequency = frequency_sequence[frequency_sel++];
    uint32_t new_time = compare_time + frequency;

    timer_set_oc_value(TIM2, TIM_OC1, new_time);
    if (frequency_sel == ARRAY_LEN(frequency_sequence)) {
      frequency_sel = 0;
    }

    /* Toggle LED to indicate compare event. */
    gpio_toggle(LED1_PORT, LED1_PIN);
  }
}

int main(void) {
  clock_setup();
  gpio_setup();
  tim_setup();

  while (1) { ;
  }

  return 0;
}


/// Altes Programm
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/timer.h>
#include <libopencm3/stm32/gpio.h>

static void clockSetup();
void gpioInit();
void timerInit();
void pwmInit();

int main(void) {
  /*Init rcc hsi*/
  clockSetup();
  /* Init leds */
  gpioInit();
  /* Init timer */
  timerInit();
  /* Init PWM */
//  pwmInit();

  while (true) {
//    for (int i = 0; i < 50000; i++) {}
  }
}

static void clockSetup() {
  rcc_clock_setup_hsi(&rcc_3v3[RCC_CLOCK_3V3_72MHZ]);
}

void gpioInit() {
  rcc_periph_clock_enable(RCC_GPIOE);
  gpio_mode_setup(GPIOE, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO13);
  gpio_set_af(GPIOE, GPIO_AF1, GPIO13);
  gpio_set_output_options(GPIOE, GPIO_OTYPE_PP, GPIO_OSPEED_100MHZ, GPIO13);
}

void timerInit() {
  rcc_periph_clock_enable(RCC_TIM1);
  rcc_periph_reset_pulse(RST_TIM1);

  timer_set_mode(
      TIM1,
      TIM_CR1_CKD_CK_INT,
      TIM_CR1_CMS_EDGE,
      TIM_CR1_DIR_UP
  );
//  timer_direction_up(TIM1);
//  timer_set_clock_division(TIM1, 0);

  timer_set_prescaler(TIM1, ((rcc_apb1_frequency * 2) / 5000));

  timer_disable_preload(TIM1);
  timer_continuous_mode(TIM1);

  timer_set_period(TIM1, 65535); // Periodendauer
  timer_set_oc_value(TIM1, TIM_OC3, 32767); // Ausschlag: Schwellenwert

//  timer_set_repetition_counter(TIM1, 0);
//  timer_enable_compare_control_update_on_trigger(TIM1_CCR3);

  /*There is some code about oc preloade etc.*/

  timer_enable_counter(TIM1);

//  timer_enable_irq(TIM1, TIM_DIER_CC1IE);
}

void pwmInit() {
  timer_disable_oc_output(TIM1, TIM_OC3);
  timer_set_oc_mode(TIM1, TIM_OC3, TIM_OCM_PWM1);
  timer_set_oc_polarity_low(TIM1, TIM_OC3);
  timer_set_oc_value(TIM1, TIM_OC3, 32767);
  timer_enable_oc_preload(TIM1, TIM_OC3);
  timer_enable_oc_output(TIM1, TIM_OC3);
}



/* Includes ------------------------------------------------------------------*//*
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/syscfg.h>
#include <libopencm3/stm32/gpio.h>
#include <libopencm3/stm32/timer.h>

#define FALLING 0
#define RISING 1

uint16_t exti_direction = FALLING;

static void clock_setup(void) {
//  rcc_clock_setup_in_hse_8mhz_out_72mhz();
  rcc_osc_on(RCC_HSI);  //Added high speed internal clock on
}

static void gpio_setup(void) {
  *//* Enable GPIOC clock. *//*
  rcc_periph_clock_enable(RCC_GPIOE);

  *//* Set GPIO12 (in GPIO port C) to 'output push-pull'. *//*
  gpio_mode_setup(GPIOE,
                  GPIO_MODE_OUTPUT,
                  GPIO_PUPD_PULLDOWN,
                  GPIO12);  //Changed to PULLDOWN before PUSHPULL but it wasn't supported
}

static void timer_setup(void){
  timer_set_mode();
  timer_set_clock_division();
  timer_enable_compare_control_update_on_trigger();

  timer_enable_counter();
}*/



/*#include "board.h"

int main() {
  while (true) {

    LED_0.set(1);
    for (int i = 0; i < 1000000; i++) {};
    LED_0.set(0);
    for (int i = 0; i < 1000000; i++) {};
  }
}*/